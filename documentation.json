{
    "pipes": [
        {
            "name": "FileSizePipe",
            "id": "pipe-FileSizePipe-62c3bc95998aa93efcde695cc575b292",
            "file": "src/app/shared/pipes/file-size/file-size.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "fileSize",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n}\n"
        },
        {
            "name": "HighlightPipe",
            "id": "pipe-HighlightPipe-13b14dbd0f857886260834a8541c6e63",
            "file": "src/app/shared/pipes/highlight/highlight.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "search",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "highlight",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n\n    transform(value: string, search: string): string {\n        const re = new RegExp(search, 'gi');\n        return value.replace(re, match => '<b>' + match + '</b>');\n    }\n\n}\n"
        },
        {
            "name": "LangPipe",
            "id": "pipe-LangPipe-bb2a4e83ee3d5ca506c67805042a68b3",
            "file": "src/app/shared/pipes/lang/lang.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "lang",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'lang'\n})\nexport class LangPipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Control",
            "id": "interface-Control-3fcde490738336610636be5addacae0a",
            "file": "src/app/shared/utils/form.ts",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { ControlItem } from '@core/models/view-models';\r\n\r\nexport const markFormGroupTouched = (formGroup: FormGroup) => {\r\n    (Object as any).values(formGroup.controls).forEach((control: FormGroup) => {\r\n        control.markAsTouched();\r\n\r\n        if (control.controls) {\r\n            markFormGroupTouched(control);\r\n        }\r\n    });\r\n};\r\n\r\nexport interface Control {\r\n    items?: ControlItem[];\r\n    changed?: () => void;\r\n    map: () => void;\r\n}\r\n\r\nexport interface ControlEntities {\r\n    [key: string]: Control;\r\n}\r\n\r\nexport const mapControls = (controls: ControlEntities): void => {\r\n    Object.keys(controls).forEach((key) => {\r\n        controls[key].map();\r\n    });\r\n};\r\n",
            "properties": [
                {
                    "name": "changed",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "items",
                    "type": "ControlItem[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "map",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ControlEntities",
            "id": "interface-ControlEntities-3fcde490738336610636be5addacae0a",
            "file": "src/app/shared/utils/form.ts",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { ControlItem } from '@core/models/view-models';\r\n\r\nexport const markFormGroupTouched = (formGroup: FormGroup) => {\r\n    (Object as any).values(formGroup.controls).forEach((control: FormGroup) => {\r\n        control.markAsTouched();\r\n\r\n        if (control.controls) {\r\n            markFormGroupTouched(control);\r\n        }\r\n    });\r\n};\r\n\r\nexport interface Control {\r\n    items?: ControlItem[];\r\n    changed?: () => void;\r\n    map: () => void;\r\n}\r\n\r\nexport interface ControlEntities {\r\n    [key: string]: Control;\r\n}\r\n\r\nexport const mapControls = (controls: ControlEntities): void => {\r\n    Object.keys(controls).forEach((key) => {\r\n        controls[key].map();\r\n    });\r\n};\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3fcde490738336610636be5addacae0a",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "Control",
                    "line": 20
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "ControlItem",
            "id": "interface-ControlItem-081787ca2d358f4d1fb5859c73765c90",
            "file": "src/app/core/models/view-models/control-item/index.ts",
            "type": "interface",
            "sourceCode": "import { Icon } from '../icon';\n\nexport type Value = number | string | boolean;\n\nexport interface ControlItem {\n    value: Value;\n    label: string;\n    icon?: Icon;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "Icon",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "type": "Value",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Icon",
            "id": "interface-Icon-697380ca77376eda5e01379359f5c88c",
            "file": "src/app/core/models/view-models/icon/index.ts",
            "type": "interface",
            "sourceCode": "export interface Icon {\n    src: string;\n    cssClass: string;\n}\n",
            "properties": [
                {
                    "name": "cssClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "src",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Item",
            "id": "interface-Item-9d86af81d7b9a1987dc351ef9818e310",
            "file": "src/app/core/models/view-models/item/index.ts",
            "type": "interface",
            "sourceCode": "import { Icon } from '../icon';\n\nexport interface Item {\n    id: string;\n    name: string;\n    icon?: Icon;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "Icon",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Placeholder",
            "id": "interface-Placeholder-fd9983a36255576afca8f2e3005bf589",
            "file": "src/app/shared/controls/date-range/date-range.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, forwardRef, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';\n\nexport interface Value {\n    from: number;\n    to: number;\n}\n\nexport interface Placeholder {\n    from: string;\n    to: string;\n}\n\n@Component({\n    selector: 'app-date-range',\n    templateUrl: './date-range.component.html',\n    styleUrls: ['./date-range.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateRangeComponent),\n            multi: true\n        }\n    ]\n})\nexport class DateRangeComponent implements OnInit, ControlValueAccessor {\n    @Input() placeholder!: Placeholder;\n    @Output() changed = new EventEmitter<Value>();\n\n    form!: FormGroup;\n\n    constructor(private fb: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            from: [null],\n            to: [null]\n        });\n    }\n\n    get min(): Date {\n        const from = this.form.controls.from.value;\n        return from ? new Date(from) : (null as any);\n    }\n\n    get max(): Date {\n        const to = this.form.controls.to.value;\n        return to ? new Date(to) : (null as any);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private propagateChange: any = () => {};\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private propagateTouched: any = () => {};\n\n    writeValue(value: Value): void {\n        this.form.patchValue(value || {});\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.form.disable();\n        } else {\n            this.form.enable();\n        }\n    }\n\n    onChanged(): void {\n        const value = { ...this.form.value };\n\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    onClosed(): void {\n        this.propagateTouched();\n    }\n}\n",
            "properties": [
                {
                    "name": "from",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "to",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Value",
            "id": "interface-Value-fd9983a36255576afca8f2e3005bf589",
            "file": "src/app/shared/controls/date-range/date-range.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, forwardRef, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';\n\nexport interface Value {\n    from: number;\n    to: number;\n}\n\nexport interface Placeholder {\n    from: string;\n    to: string;\n}\n\n@Component({\n    selector: 'app-date-range',\n    templateUrl: './date-range.component.html',\n    styleUrls: ['./date-range.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateRangeComponent),\n            multi: true\n        }\n    ]\n})\nexport class DateRangeComponent implements OnInit, ControlValueAccessor {\n    @Input() placeholder!: Placeholder;\n    @Output() changed = new EventEmitter<Value>();\n\n    form!: FormGroup;\n\n    constructor(private fb: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            from: [null],\n            to: [null]\n        });\n    }\n\n    get min(): Date {\n        const from = this.form.controls.from.value;\n        return from ? new Date(from) : (null as any);\n    }\n\n    get max(): Date {\n        const to = this.form.controls.to.value;\n        return to ? new Date(to) : (null as any);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private propagateChange: any = () => {};\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private propagateTouched: any = () => {};\n\n    writeValue(value: Value): void {\n        this.form.patchValue(value || {});\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.form.disable();\n        } else {\n            this.form.enable();\n        }\n    }\n\n    onChanged(): void {\n        const value = { ...this.form.value };\n\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    onClosed(): void {\n        this.propagateTouched();\n    }\n}\n",
            "properties": [
                {
                    "name": "from",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "to",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "FilesUploadDirective",
            "id": "directive-FilesUploadDirective-b22012bad1614d801538ef31eeb3065f",
            "file": "src/app/shared/directives/files-upload/files-upload.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[ticFilesUpload]'\n})\nexport class FilesUploadDirective {\n\n  constructor() { }\n\n}\n",
            "selector": "[ticFilesUpload]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b90958c74e45c87985c5d76687d07bd4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ng-starter-erp'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    //   templateUrl: './app.component.html',\n    template: ` <router-outlet></router-outlet> `,\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    title = 'ng-starter-erp';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "AutocompleteComponent",
            "id": "component-AutocompleteComponent-b257e34aea41a6b153f2133c9ae2c8f6",
            "file": "src/app/shared/controls/autocomplete/autocomplete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-autocomplete",
            "styleUrls": [
                "./autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 31,
                    "type": "ControlItem[]"
                },
                {
                    "name": "placeholder",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<Value>()",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "formControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "options$",
                    "type": "Observable<ControlItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "propagateTouched",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "item",
                            "type": "ControlItem",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string | any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ControlItem",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ControlItem[]",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    EventEmitter,\n    forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\n\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, distinctUntilChanged, startWith, map, filter } from 'rxjs/operators';\n\nimport { ControlItem, Value } from '@core/models/view-models';\nexport { ControlItem, Value } from '@core/models/view-models';\n\n@Component({\n    selector: 'app-autocomplete',\n    templateUrl: './autocomplete.component.html',\n    styleUrls: ['./autocomplete.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => AutocompleteComponent),\n            multi: true\n        }\n    ]\n})\nexport class AutocompleteComponent implements OnInit, OnDestroy, ControlValueAccessor {\n    @Input() items!: ControlItem[];\n    @Input() placeholder!: string;\n\n    @Output() changed = new EventEmitter<Value>();\n\n    formControl = new FormControl();\n    options$!: Observable<ControlItem[]>;\n\n    private destroy = new Subject<any>();\n\n    constructor() {}\n\n    ngOnInit(): void {\n        this.options$ = this.formControl.valueChanges.pipe(\n            startWith(''),\n            filter((value) => typeof value === 'string' || typeof value === 'object'),\n            map((value) => (typeof value === 'string' ? value : value.label)),\n            map((label) => (label ? this.filter(label) : this.items.slice()))\n        );\n\n        this.formControl.valueChanges\n            .pipe(takeUntil(this.destroy), distinctUntilChanged())\n            .subscribe((item) => {\n                const value = typeof item === 'object' ? item.value : null;\n                this.propagateChange(value);\n                this.changed.emit(value);\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy.next();\n        this.destroy.complete();\n    }\n\n    private filter(value: string): ControlItem[] {\n        const filterValue = value.toLowerCase();\n        return this.items.filter((item) => item.label.toLowerCase().includes(filterValue));\n    }\n\n    private propagateChange: any = () => {};\n    private propagateTouched: any = () => {};\n\n    writeValue(value: Value): void {\n        const selectedOption = this.items.find((item) => item.value === value);\n        this.formControl.setValue(selectedOption);\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.formControl.disable();\n        } else {\n            this.formControl.enable();\n        }\n    }\n\n    displayFn(item?: ControlItem): string | any {\n        return item ? item.label : undefined;\n    }\n\n    onBlur(): void {\n        this.propagateTouched();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"styles/colors\";\r\n\r\n.autocomplete {\r\n    position: relative;\r\n\r\n    &__options {\r\n        position: absolute;\r\n    }  \r\n}\r\n\r\n.option {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    &__icon {\r\n        width: 30px;\r\n        height: 30px;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n}\r\n\r\n:host-context(.form-field_error) {\r\n    input {\r\n      border: 1px solid $error;\r\n    }\r\n}",
                    "styleUrl": "./autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 39
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"autocomplete\">\n    <input\n        class=\"app-input\"\n        type=\"text\"\n        #search\n        [placeholder]=\"placeholder || 'Pick one'\"\n        [formControl]=\"formControl\"\n        [matAutocomplete]=\"auto\"\n        (blur)=\"onBlur()\"\n    />\n\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n        <mat-option *ngFor=\"let option of options$ | async\" [value]=\"option\">\n            <div class=\"option\">\n                <!-- <div class=\"option__icon\" *ngIf=\"option.icon\">\n                    <span [ngClass]=\"option.icon?.cssClass\"></span>\n                </div> -->\n                <div\n                    class=\"option__label\"\n                    [innerHTML]=\"option.label | highlight: search.value\"\n                ></div>\n            </div>\n        </mat-option>\n    </mat-autocomplete>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-575192760131af895e490f80996d78b9-1",
            "file": "src/app/shared/buttons/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "line": 11,
                    "type": "ButtonType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nexport type ButtonType = 'button' | 'submit';\n\n@Component({\n    selector: 'app-button',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n\n    @Input() type: ButtonType;\n\n    constructor() {\n        this.type = 'button';\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button class=\"app-button\" [type]=\"type\">\n    <ng-content></ng-content>\n</button>"
        },
        {
            "name": "CheckboxesComponent",
            "id": "component-CheckboxesComponent-9c7dd9009f51f92b713445ca3f0174f0",
            "file": "src/app/shared/controls/checkboxes/checkboxes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxesComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-checkboxes",
            "styleUrls": [
                "./checkboxes.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkboxes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 20,
                    "type": "ControlItem[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<Value[]>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "value",
                    "type": "Value[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        },
                        {
                            "name": "checked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Value[]",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isChecked",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        },
                        {
                            "name": "checked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { ControlItem, Value } from '@core/models/view-models';\nexport { ControlItem, Value } from '@core/models/view-models';\n\n@Component({\n    selector: 'app-checkboxes',\n    templateUrl: './checkboxes.component.html',\n    styleUrls: ['./checkboxes.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CheckboxesComponent),\n            multi: true\n        }\n    ]\n})\nexport class CheckboxesComponent implements OnInit, ControlValueAccessor {\n    @Input() items!: ControlItem[];\n    @Output() changed = new EventEmitter<Value[]>();\n\n    value!: Value[];\n    isDisabled!: boolean;\n\n    constructor() {}\n\n    ngOnInit(): void {}\n\n    private propagateChange: any = () => {};\n\n    writeValue(value: Value[]): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {}\n\n    setDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n\n    onChanged(value: Value, checked: boolean): void {\n        const selected = this.getSelected(value, checked);\n\n        this.value = selected;\n        this.propagateChange(selected);\n        this.changed.emit(selected);\n    }\n\n    private getSelected(value: Value, checked: boolean): Value[] {\n        const selected: Value[] = this.value ? [...this.value] : [];\n\n        if (checked) {\n            if (!selected.includes(value)) {\n                selected.push(value);\n            }\n        } else {\n            const index = selected.indexOf(value);\n            selected.splice(index, 1);\n        }\n\n        return selected.length ? selected : (null as any);\n    }\n\n    isChecked(value: Value): boolean {\n        return this.value && this.value.includes(value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n\r\n.checkbox {\r\n    display: block;\r\n    position: relative;\r\n    text-indent: 30px;\r\n    margin: 8px 0;\r\n    padding: 0 20px 0 0;\r\n\r\n    cursor: pointer;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n\r\n    &__input {\r\n        position: absolute;\r\n        opacity: 0;\r\n        cursor: pointer;\r\n        height: 0;\r\n        width: 0;\r\n        &:checked {\r\n            &~.checkbox__checkmark {\r\n                background-color: $primary;\r\n               \r\n                &:after {\r\n                    display: block;\r\n                    left: 7px;\r\n                    top: 3px;\r\n                    width: 4px;\r\n                    height: 8px;\r\n                    border: solid #fff;\r\n                    border-width: 0 3px 3px 0;\r\n                    transform: rotate(45deg);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &__checkmark {\r\n\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        height: 20px;\r\n        width: 20px;\r\n        border-radius: 4px;\r\n        background-color: #eee;\r\n\r\n        &:after {\r\n            content: \"\";\r\n            position: absolute;\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    &_disabled {\r\n        color: rgba(0,0,0,.38);\r\n    }\r\n\r\n    &:hover {\r\n        .checkbox__checkmark {\r\n            background-color: #ccc;\r\n        }\r\n\r\n        .checkbox__input:checked ~ .checkbox__checkmark {\r\n            background-color: $primary-dark;\r\n        }\r\n    }\r\n}\r\n\r\n:host-context(.form-field_error) {\r\n    .checkbox__checkmark {\r\n      border: 1px solid $error;\r\n    }\r\n}",
                    "styleUrl": "./checkboxes.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"checkboxes\">\n    <div *ngFor=\"let item of items\">\n        <label class=\"checkbox\" [class.checkbox_disabled]=\"isDisabled\">\n            {{ item.label }}\n            <input\n                type=\"checkbox\"\n                class=\"checkbox__input\"\n                [value]=\"item.value\"\n                [attr.disabled]=\"isDisabled ? true : null\"\n                [checked]=\"isChecked(item.value)\"\n                (change)=\"onChanged(item.value, $event.target.checked)\"\n            />\n            <span class=\"checkbox__checkmark\"></span>\n        </label>\n    </div>\n</div>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-2fc8a5d0822dd7fb27c0ebf6d7f53ee2",
            "file": "src/app/features/home/pages/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dashboard works!</p>\n"
        },
        {
            "name": "DateComponent",
            "id": "component-DateComponent-dcb9d3074b1005dd476c337761551bcd",
            "file": "src/app/shared/controls/date/date.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-date",
            "styleUrls": [
                "./date.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "max",
                    "line": 25,
                    "type": "Date"
                },
                {
                    "name": "min",
                    "line": 23,
                    "type": "Date"
                },
                {
                    "name": "placeholder",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<Value>()",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "propagateTouched",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "value",
                    "type": "Value | undefined",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "onChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatDatepickerInputEvent<Date>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatDatepickerInputEvent<Date>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\n\ntype Value = number;\n\n@Component({\n    selector: 'app-date',\n    templateUrl: './date.component.html',\n    styleUrls: ['./date.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateComponent),\n            multi: true\n        }\n    ]\n})\nexport class DateComponent implements OnInit, ControlValueAccessor {\n    @Input() placeholder!: string;\n\n    @Input() min!: Date;\n\n    @Input() max!: Date;\n\n    @Output() changed = new EventEmitter<Value>();\n    @Output() closed = new EventEmitter<void>();\n\n    value: Value | undefined;\n    isDisabled!: boolean;\n\n    constructor() {}\n\n    ngOnInit(): void {}\n\n    get inputValue(): Date {\n        return this.value ? new Date(this.value) : (null as any);\n    }\n\n    private propagateChange: any = () => {};\n    private propagateTouched: any = () => {};\n\n    writeValue(value: Value): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n\n    onChanged(event: MatDatepickerInputEvent<Date>): void {\n        const value = event.value ? event.value.getTime() : (null as any);\n\n        this.value = value;\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    onClosed(): void {\n        this.propagateTouched();\n        this.closed.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n\r\n.date {\r\n    display: inline-flex;\r\n}\r\n\r\n:host-context(.form-field_error) {\r\n    input {\r\n        border: 1px solid $error;\r\n    }\r\n}",
                    "styleUrl": "./date.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "inputValue": {
                    "name": "inputValue",
                    "getSignature": {
                        "name": "inputValue",
                        "type": "",
                        "returnType": "Date",
                        "line": 37
                    }
                }
            },
            "templateData": "<div class=\"date\">\n    <input\n        class=\"app-input\"\n        type=\"text\"\n        readonly\n        [matDatepicker]=\"picker\"\n        (dateChange)=\"onChanged($event)\"\n        (click)=\"picker.open()\"\n        (click)=\"picker.open()\"\n        [attr.disabled]=\"isDisabled ? true : null\"\n        [value]=\"inputValue\"\n        [min]=\"min\"\n        [max]=\"max\"\n        placeholder=\"{{ placeholder || 'Choose a date' }}\"\n    />\n    <mat-datepicker-toggle matSuffix [for]=\"picker\" [disabled]=\"isDisabled\">\n    </mat-datepicker-toggle>\n    <mat-datepicker #picker (closed)=\"onClosed()\"></mat-datepicker>\n</div>\n"
        },
        {
            "name": "DateRangeComponent",
            "id": "component-DateRangeComponent-fd9983a36255576afca8f2e3005bf589",
            "file": "src/app/shared/controls/date-range/date-range.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateRangeComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-date-range",
            "styleUrls": [
                "./date-range.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-range.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "line": 27,
                    "type": "Placeholder"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<Value>()",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "propagateTouched",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "onClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';\n\nexport interface Value {\n    from: number;\n    to: number;\n}\n\nexport interface Placeholder {\n    from: string;\n    to: string;\n}\n\n@Component({\n    selector: 'app-date-range',\n    templateUrl: './date-range.component.html',\n    styleUrls: ['./date-range.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateRangeComponent),\n            multi: true\n        }\n    ]\n})\nexport class DateRangeComponent implements OnInit, ControlValueAccessor {\n    @Input() placeholder!: Placeholder;\n    @Output() changed = new EventEmitter<Value>();\n\n    form!: FormGroup;\n\n    constructor(private fb: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            from: [null],\n            to: [null]\n        });\n    }\n\n    get min(): Date {\n        const from = this.form.controls.from.value;\n        return from ? new Date(from) : (null as any);\n    }\n\n    get max(): Date {\n        const to = this.form.controls.to.value;\n        return to ? new Date(to) : (null as any);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private propagateChange: any = () => {};\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private propagateTouched: any = () => {};\n\n    writeValue(value: Value): void {\n        this.form.patchValue(value || {});\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (isDisabled) {\n            this.form.disable();\n        } else {\n            this.form.enable();\n        }\n    }\n\n    onChanged(): void {\n        const value = { ...this.form.value };\n\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    onClosed(): void {\n        this.propagateTouched();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n\r\n.date-range {\r\n    &__items{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n    }\r\n\r\n    &__dash {\r\n        display: block;\r\n        padding-right: 12px;\r\n    }\r\n}\r\n\r\n:host-context(.form-field_error) {\r\n    .input {\r\n      border: 1px solid $error;\r\n    }\r\n}",
                    "styleUrl": "./date-range.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "min": {
                    "name": "min",
                    "getSignature": {
                        "name": "min",
                        "type": "",
                        "returnType": "Date",
                        "line": 41
                    }
                },
                "max": {
                    "name": "max",
                    "getSignature": {
                        "name": "max",
                        "type": "",
                        "returnType": "Date",
                        "line": 46
                    }
                }
            },
            "templateData": "<div class=\"date-range\">\n    <form [formGroup]=\"form\" novalidate autocomplete=\"off\">\n        <div class=\"date-range__items\">\n            <app-date\n                formControlName=\"from\"\n                (closed)=\"onClosed()\"\n                [placeholder]=\"placeholder?.from || 'From'\"\n                (changed)=\"onChanged()\"\n                [max]=\"max\"\n            >\n            </app-date>\n\n            <span class=\"date-range__dash\">&mdash;</span>\n\n            <app-date\n                formControlName=\"to\"\n                (closed)=\"onClosed()\"\n                [placeholder]=\"placeholder?.to || 'To'\"\n                (changed)=\"onChanged()\"\n                [min]=\"min\"\n            ></app-date>\n        </div>\n    </form>\n</div>\n"
        },
        {
            "name": "EmailConfirmComponent",
            "id": "component-EmailConfirmComponent-8fb0c0c775bf997cfa7b38e84e8e3ddd",
            "file": "src/app/core/auth/pages/email-confirm/email-confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-email-confirm",
            "styleUrls": [
                "./email-confirm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./email-confirm.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-email-confirm',\n    templateUrl: './email-confirm.component.html',\n    styleUrls: ['./email-confirm.component.scss']\n})\nexport class EmailConfirmComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./email-confirm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>email-confirm works!</p>\n"
        },
        {
            "name": "ErrorsComponent",
            "id": "component-ErrorsComponent-11948683735598b561c07536cfe2d980",
            "file": "src/app/shared/notifications/components/errors/errors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-errors",
            "styleUrls": [
                "./errors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./errors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-errors',\n    templateUrl: './errors.component.html',\n    styleUrls: ['./errors.component.scss']\n})\nexport class ErrorsComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./errors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>errors works!</p>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-716253895367f1b2e2b968aec5cbcfa4",
            "file": "src/app/shared/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-footer',\n    templateUrl: './footer.component.html',\n    styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>footer works!</p>\n"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-b9d19b427ce476844c6033f9470e8f44",
            "file": "src/app/shared/controls/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-field",
            "styleUrls": [
                "./form-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 13,
                    "type": "AbstractControl | any"
                },
                {
                    "name": "isInline",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "patternError",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "required",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\n@Component({\n    selector: 'app-form-field',\n    templateUrl: './form-field.component.html',\n    styleUrls: ['./form-field.component.scss']\n})\nexport class FormFieldComponent implements OnInit {\n    @Input() label!: string;\n    @Input() required!: boolean;\n    @Input() isInline: boolean;\n    @Input() control: AbstractControl | any;\n    @Input() patternError!: string;\n\n    constructor() {\n        this.isInline = true;\n    }\n\n    ngOnInit(): void {}\n\n    hasError(): boolean {\n        return this.control && this.control.invalid && this.control.touched;\n    }\n\n    get errorKey() {\n        return this.control && this.control.errors && Object.keys(this.control.errors)[0];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n\r\n.form-field {\r\n    padding-bottom: 8px;\r\n\r\n    &__label {\r\n        display: block;\r\n        margin: 0 0 6px 0;\r\n    }\r\n    &__req {\r\n        color: $error;\r\n    }\r\n    &__control {\r\n        display: block;\r\n    }\r\n\r\n    &__error {\r\n        opacity: 0;\r\n        font-size: 12px;\r\n        color: $error;\r\n        padding: 4px 0;\r\n        min-height: 22px;\r\n\r\n        span {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    &_error {\r\n        .form-field__error {\r\n            opacity: 1;\r\n        }\r\n    }\r\n\r\n    &_inline {\r\n        display: flex;\r\n\r\n        >.form-field__label {\r\n            padding: 10px 12px 10px 0;\r\n            width: 30%;\r\n        }\r\n\r\n        >.form-field__control {\r\n           width: 70%;\r\n        }\r\n    }\r\n\r\n}",
                    "styleUrl": "./form-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errorKey": {
                    "name": "errorKey",
                    "getSignature": {
                        "name": "errorKey",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"form-field\" [class.form-field_error]=\"hasError()\" [class.form-field_inline]=\"isInline\">\n    <label class=\"form-field__label\">\n        {{ label }}\n        <span class=\"form-field__req\" *ngIf=\"required\">*</span>\n    </label>\n\n    <div class=\"form-field__control\">\n        <ng-content></ng-content>\n\n        <div class=\"form-field__error\">\n            <ng-container *ngIf=\"control && errorKey\" [ngSwitch]=\"errorKey\">\n                <span *ngSwitchCase=\"'min'\">Minimum {{ control.errors[errorKey].min }}</span>\n                <span *ngSwitchCase=\"'max'\">Maximum {{ control.errors[errorKey].max }}</span>\n                <span *ngSwitchCase=\"'required'\">This field is required</span>\n                <span *ngSwitchCase=\"'requiredTrue'\">This field is required</span>\n                <span *ngSwitchCase=\"'minlength'\"\n                    >At least {{ control.errors[errorKey].requiredLength }} characters</span\n                >\n                <span *ngSwitchCase=\"'maxlength'\"\n                    >No more than {{ control.errors[errorKey].requiredLength }} characters</span\n                >\n                <span *ngSwitchCase=\"'pattern'\">\n                    <span *ngIf=\"patternError\">{{ patternError }}</span>\n                    <span *ngIf=\"!patternError\">Pattern does not match</span>\n                </span>\n            </ng-container>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-e1939d03abee9c0302f45d65f807b061-1",
            "file": "src/app/shared/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<p>header works!</p>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-c13a2b613fb18a6d077fc7b8bc772320",
            "file": "src/app/features/home/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>home works!</p>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-642a3b604a97383c47ba035ba878198c",
            "file": "src/app/shared/controls/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "propagateTouched",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "value",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onKeyup",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, forwardRef, Input, Output, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\n@Component({\n    selector: 'app-input',\n    templateUrl: './input.component.html',\n    styleUrls: ['./input.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputComponent),\n            multi: true\n        }\n    ]\n})\nexport class InputComponent implements OnInit, ControlValueAccessor {\n    @Input() placeholder!: string;\n    @Output() changed = new EventEmitter<string>();\n\n    value: string | undefined;\n    isDisabled!: boolean;\n\n    constructor() {}\n\n    ngOnInit(): void {}\n\n    private propagateChange: any = () => {};\n    private propagateTouched: any = () => {};\n\n    writeValue(value: string): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n\n    onKeyup(value: string): void {\n        this.value = value;\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    onBlur(): void {\n        this.propagateTouched();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n\r\n:host-context(.form-field_error) {\r\n  input {\r\n    border: 1px solid $error;\r\n  }\r\n}",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<input\n    type=\"text\"\n    class=\"app-input\"\n    [value]=\"value\"\n    [placeholder]=\"placeholder || ''\"\n    [attr.disabled]=\"isDisabled ? true : null\"\n    (keyup)=\"onKeyup($event.target.value)\"\n    (blur)=\"onBlur()\"\n/>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-f53fed121ecc68abfafca20d8b195a85",
            "file": "src/app/core/auth/pages/login/login.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "regexErrors",
                    "defaultValue": "regexErrors",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\n\nimport { regex, regexErrors, markFormGroupTouched } from '@shared/utils';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoginComponent implements OnInit {\n    loading!: Observable<boolean>;\n\n    form!: FormGroup;\n    regexErrors = regexErrors;\n\n    constructor(private fb: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            email: [\n                null,\n                {\n                    updateOn: 'blur',\n                    validators: [\n                        Validators.required,\n                        Validators.maxLength(128),\n                        Validators.pattern(regex.email)\n                    ]\n                }\n            ],\n            password: [\n                null,\n                {\n                    updateOn: 'change',\n                    validators: [Validators.required]\n                }\n            ]\n        });\n    }\n    public onSubmit(): void {\n        if (this.form.valid) {\n            const value = this.form.value;\n        } else {\n            markFormGroupTouched(this.form);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-page {\r\n    max-width: 500px;\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-page\">\n    <div class=\"app-page__header\">\n        <h1>Log in</h1>\n    </div>\n\n    <form\n        [formGroup]=\"form\"\n        novalidate\n        autocomplete=\"off\"\n        (submit)=\"onSubmit()\"\n        (keyup.enter)=\"onSubmit()\"\n    >\n        <div class=\"app-page__content\">\n            <app-form-field\n                label=\"Email\"\n                [required]=\"true\"\n                [control]=\"form.controls.email\"\n                [isInline]=\"false\"\n                [patternError]=\"regexErrors.email\"\n            >\n                <app-input formControlName=\"email\"></app-input>\n            </app-form-field>\n\n            <app-form-field\n                label=\"Password\"\n                [required]=\"true\"\n                [control]=\"form.controls.password\"\n                [isInline]=\"false\"\n                [patternError]=\"regexErrors.password\"\n            >\n                <app-password formControlName=\"password\"></app-password>\n            </app-form-field>\n        </div>\n\n        <div class=\"app-page__footer\">\n            <app-button type=\"submit\">Log in</app-button>\n        </div>\n    </form>\n\n    <app-spinner *ngIf=\"loading | async\"></app-spinner>\n</div>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-d0a0dd528f39f3c00b949e627ca7f519",
            "file": "src/app/core/not-found/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-not-found',\n    templateUrl: './not-found.component.html',\n    styleUrls: ['./not-found.component.scss']\n})\nexport class NotFoundComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./not-found.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>not-found works!</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-6203a25dedc2b92c4b6245986c6ecdd1",
            "file": "src/app/shared/controls/password/password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PasswordComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-password",
            "styleUrls": [
                "./password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "passwordType",
                    "type": "PasswordType",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "propagateTouched",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onKeyup",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, forwardRef, Input, Output, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\ntype PasswordType = 'password' | 'text';\n\n@Component({\n    selector: 'app-password',\n    templateUrl: './password.component.html',\n    styleUrls: ['./password.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => PasswordComponent),\n            multi: true\n        }\n    ]\n})\nexport class PasswordComponent implements OnInit, ControlValueAccessor {\n    @Input() placeholder!: string;\n\n    @Output() changed = new EventEmitter<string>();\n\n    value!: string;\n    isDisabled!: boolean;\n    passwordType: PasswordType;\n\n    constructor() {\n        this.passwordType = 'password';\n    }\n\n    ngOnInit(): void {}\n\n    private propagateChange: any = () => {};\n    private propagateTouched: any = () => {};\n\n    writeValue(value: string): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n\n    onKeyup(value: string): void {\n        this.value = value;\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    onBlur(): void {\n        this.propagateTouched();\n    }\n\n    togglePassword(): void {\n        this.passwordType = this.passwordType === 'password' ? 'text' : 'password';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n@import url(\"https://fonts.googleapis.com/icon?family=Material+Icons\");\r\n\r\n.password {\r\n    display: flex;\r\n\r\n    &__actions {\r\n        width: 30px;\r\n        display: inline-flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n        margin-top: 5px;\r\n    }\r\n}\r\n\r\n:host-context(.form-field_error) {\r\n    input {\r\n        border: 1px solid $error;\r\n    }\r\n}",
                    "styleUrl": "./password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"password\">\n    <input\n        type=\"text\"\n        class=\"app-input\"\n        [value]=\"value\"\n        [placeholder]=\"placeholder || 'Password'\"\n        [attr.disabled]=\"isDisabled ? true : null\"\n        (keyup)=\"onKeyup($event.target.value)\"\n        (blur)=\"onBlur()\"\n        [attr.type]=\"passwordType\"\n    />\n    <mat-icon class=\"password__actions\" (click)=\"togglePassword()\">\n        <span *ngIf=\"value\">{{\n            passwordType === 'password' ? 'visibility' : 'visibility_off'\n        }}</span>\n    </mat-icon>\n</div>\n"
        },
        {
            "name": "RadiosComponent",
            "id": "component-RadiosComponent-c02f19860e8144a4f4fa17f3226ec664",
            "file": "src/app/shared/controls/radios/radios.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadiosComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-radios",
            "styleUrls": [
                "./radios.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radios.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 20,
                    "type": "ControlItem[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<Value>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "value",
                    "type": "Value",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "isChecked",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { ControlItem, Value } from '@core/models/view-models';\nexport { ControlItem, Value } from '@core/models/view-models';\n\n@Component({\n    selector: 'app-radios',\n    templateUrl: './radios.component.html',\n    styleUrls: ['./radios.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RadiosComponent),\n            multi: true\n        }\n    ]\n})\nexport class RadiosComponent implements OnInit, ControlValueAccessor {\n    @Input() items!: ControlItem[];\n\n    @Output() changed = new EventEmitter<Value>();\n\n    value!: Value;\n    isDisabled!: boolean;\n\n    constructor() {}\n\n    ngOnInit(): void {}\n\n    private propagateChange: any = () => {};\n\n    writeValue(value: Value): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {}\n\n    setDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n\n    onChanged(value: Value): void {\n        this.value = value;\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    isChecked(value: Value): boolean {\n        return this.value === value;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n\r\n.radio {\r\n    display: block;\r\n    position: relative;\r\n    text-indent: 30px;\r\n    margin: 8px 0;\r\n    padding: 0 20px 0 0;\r\n\r\n    cursor: pointer;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n\r\n    &__input {\r\n\r\n        position: absolute;\r\n        opacity: 0;\r\n        cursor: pointer;\r\n        height: 0;\r\n        width: 0;\r\n\r\n        &:checked {\r\n            &~.radio__checkmark {\r\n                background-color: $primary;\r\n               \r\n                &:after {\r\n                    display: block;\r\n                    background: #fff;\r\n                    width: 8px;\r\n                    height: 8px;\r\n                    border-radius: 50%;\r\n                    left: 6px;\r\n                    top: 6px;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    &__checkmark {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        height: 20px;\r\n        width: 20px;\r\n        border-radius: 50%;\r\n        background-color: #eee;\r\n\r\n        &:after {\r\n            content: \"\";\r\n            position: absolute;\r\n            display: none;\r\n        }\r\n\r\n    }\r\n\r\n    &_disabled {\r\n        color: rgba(0,0,0,.38);\r\n    }\r\n\r\n    &:hover {\r\n        .radio__checkmark {\r\n            background-color: #ccc;\r\n        }\r\n\r\n        .radio__input:checked ~ .radio__checkmark {\r\n            background-color: $primary-dark;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n:host-context(.form-field_error) {\r\n    .radio__checkmark {\r\n      border: 1px solid $error;\r\n    }\r\n}\r\n",
                    "styleUrl": "./radios.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"radios\">\n    <div *ngFor=\"let item of items\">\n        <label class=\"radio\" [class.radio_disabled]=\"isDisabled\">\n            {{ item.label }}\n            <input\n                type=\"radio\"\n                class=\"radio__input\"\n                (change)=\"onChanged(item.value)\"\n                [value]=\"item.value\"\n                [checked]=\"isChecked(item.value)\"\n                [attr.disabled]=\"isDisabled ? true : null\"\n            />\n\n            <span class=\"radio__checkmark\"></span>\n        </label>\n    </div>\n</div>\n"
        },
        {
            "name": "RegistrationComponent",
            "id": "component-RegistrationComponent-86321f70f520e014848d45c4c575776a",
            "file": "src/app/core/auth/pages/registration/registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration",
            "styleUrls": [
                "./registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-registration',\n    templateUrl: './registration.component.html',\n    styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>registration works!</p>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-3ddaff5fab20114b1ed7289f131c1f3f",
            "file": "src/app/shared/controls/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 22,
                    "type": "ControlItem[]"
                },
                {
                    "name": "placeholder",
                    "line": 23,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<Value>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "propagateTouched",
                    "defaultValue": "() => {...}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "value",
                    "type": "Value",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "onChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Value"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { MatSelectChange } from '@angular/material/select';\n\nimport { ControlItem, Value } from '@core/models/view-models';\nexport { ControlItem, Value } from '@core/models/view-models';\n\n@Component({\n    selector: 'app-select',\n    templateUrl: './select.component.html',\n    styleUrls: ['./select.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SelectComponent),\n            multi: true\n        }\n    ]\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n    @Input() items!: ControlItem[];\n    @Input() placeholder!: string;\n    @Output() changed = new EventEmitter<Value>();\n\n    value!: Value;\n    isDisabled!: boolean;\n\n    constructor() {}\n\n    ngOnInit(): void {}\n\n    private propagateChange: any = () => {};\n    private propagateTouched: any = () => {};\n\n    writeValue(value: Value): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.propagateTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n\n    onChanged(event: MatSelectChange): void {\n        const value = event.value ? event.value : null;\n\n        this.value = value;\n        this.propagateChange(value);\n        this.changed.emit(value);\n    }\n\n    onBlur(): void {\n        this.propagateTouched();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors.scss\";\r\n\r\n.select {\r\n    line-height: 36px;\r\n    padding: 0 15px 0 15px;\r\n\r\n    &_disabled {\r\n        background: rgba(0, 0, 0, .05);\r\n        border: 1px solid rgba(0, 0, 0, .15);\r\n    }\r\n}\r\n\r\n:host-context(.form-field_error) {\r\n    .select {\r\n      border: 1px solid $error;\r\n    }\r\n}",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"select app-input\" [class.select_disabled]=\"isDisabled\">\n    <mat-select\n        [value]=\"value\"\n        [disabled]=\"isDisabled\"\n        (selectionChange)=\"onChanged($event)\"\n        (blur)=\"onBlur()\"\n    >\n        <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\n            {{ item.label }}\n        </mat-option>\n    </mat-select>\n</div>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-575eb4c12b41182c2a0985dfebaf1168",
            "file": "src/app/shared/layout/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-sidebar',\n    templateUrl: './sidebar.component.html',\n    styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>sidebar works!</p>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-65f1cc6f643b6fd257a51cbdcf835cc6",
            "file": "src/app/shared/indicators/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "type": "ProgressSpinnerMode",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "value",
                    "defaultValue": "30",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\n\n@Component({\n    selector: 'app-spinner',\n    templateUrl: './spinner.component.html',\n    styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent implements OnInit {\n    color: ThemePalette = 'primary';\n    mode: ProgressSpinnerMode = 'indeterminate';\n    value = 30;\n\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 99;\r\n    background: rgba(255,255,255,0.65);\r\n    border-radius: 8px;\r\n}\r\n\r\n.spinner {\r\n    width: 100px;\r\n    height: 100px;\r\n    left: calc(50% - 50px);\r\n    top: calc(50% - 50px);\r\n    position: relative;\r\n}",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n    <div class=\"spinner\">\n        <mat-progress-spinner [color]=\"color\" [mode]=\"mode\" [value]=\"value\"></mat-progress-spinner>\n    </div>\n</div>"
        },
        {
            "name": "SuccessComponent",
            "id": "component-SuccessComponent-d81158950996a5d8ee49ba789de0b262",
            "file": "src/app/shared/notifications/components/success/success.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-success",
            "styleUrls": [
                "./success.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./success.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-success',\n    templateUrl: './success.component.html',\n    styleUrls: ['./success.component.scss']\n})\nexport class SuccessComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./success.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>success works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AboutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AboutRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AboutRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AutocompleteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutocompleteComponent"
                        },
                        {
                            "name": "HighlightPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ControlsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DateComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateRangeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateRangeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DateRangeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EmailConfirmModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EmailConfirmComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "EmailConfirmRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EmailConfirmRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IndicatorsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SpinnerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpinnerModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "FormFieldModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LoginRoutingModule"
                        },
                        {
                            "name": "PasswordModule"
                        },
                        {
                            "name": "SpinnerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NotFoundRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorsComponent"
                        },
                        {
                            "name": "SuccessComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PasswordModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PasswordComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RadiosModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadiosComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadiosComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegistrationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RegistrationRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegistrationRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "FileSizePipe"
                        },
                        {
                            "name": "FilesUploadDirective"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HighlightPipe"
                        },
                        {
                            "name": "LangPipe"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpinnerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    rootUrl: ''\n}"
            },
            {
                "name": "HOST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/mock_api_contants.ts",
                "type": "",
                "defaultValue": "environment.rootUrl"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mapControls",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/form.ts",
                "type": "",
                "defaultValue": "(controls: ControlEntities): void => {\r\n    Object.keys(controls).forEach((key) => {\r\n        controls[key].map();\r\n    });\r\n}"
            },
            {
                "name": "markFormGroupTouched",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/form.ts",
                "type": "",
                "defaultValue": "(formGroup: FormGroup) => {\r\n    (Object as any).values(formGroup.controls).forEach((control: FormGroup) => {\r\n        control.markAsTouched();\r\n\r\n        if (control.controls) {\r\n            markFormGroupTouched(control);\r\n        }\r\n    });\r\n}"
            },
            {
                "name": "MOCK_API",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/mock_api_contants.ts",
                "type": "object",
                "defaultValue": "{\r\n\r\n\r\n    // users group\r\n    I_1_FETCH_USERS:`${HOST}/users/filter`,\r\n    I_2_FETCH_USER_BY_ID:`${HOST}/users`,\r\n    I_3_CREATE_USER:`${HOST}/users`,\r\n    I_4_UPDATE_USER:`${HOST}/users`,\r\n    I_10_CREATE_USER_AUTH: `${HOST}/users/auth/login`,\r\n    I_11_RENEWTOKEN: `${HOST}/users/auth/renew`,\r\n    I_12_UPDATE_USER_AUTH: `${HOST}/users/auth/login`,\r\n    I_13_FETCH_USER_OPERATION: `${HOST}/users/operation`,\r\n\r\n    // \r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "regex",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/regex.ts",
                "type": "object",
                "defaultValue": "{\r\n    // eslint-disable-next-line no-control-regex\r\n    email: /^\\s*(?:[A-Za-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\s*$/,\r\n    password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*([0-9]|[^\\w\\s]))/g,\r\n    latin: /^[A-Za-z-\\s]+$/,\r\n    numbers: /^\\d+$/,\r\n    latinAndNumbers: /^[A-Za-z0-9]+$/,\r\n    latinAndSpaces: /^[a-zA-Z\\s]*$/,\r\n    phone: /^[0-9-]+$/,\r\n    safe: /^([\\sA-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])*$/\r\n}"
            },
            {
                "name": "regexErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/regex.ts",
                "type": "object",
                "defaultValue": "{\r\n    email: 'Email is incorrect',\r\n    password: 'Password must contain an upper case letter, a lower case letter and a number',\r\n    latin: 'Latin letters only',\r\n    numbers: 'Digits only',\r\n    latinAndNumbers: 'Latin letters and digits only',\r\n    latinAndSpaces: 'Latin letters and spaces only',\r\n    phone: 'Phone number is incorrect',\r\n    safe: 'Latin letters, numbers and special characters only'\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "rootRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.module.ts",
                "type": "Route[]",
                "defaultValue": "[\n    {\n        path: '',\n        redirectTo: 'auth',\n        pathMatch: 'full'\n    },\n    {\n        path: '',\n        children: [\n            {\n                path: 'home',\n                loadChildren: () => import('@features/home/home.module').then((m) => m.HomeModule)\n            },\n            {\n                path: 'auth',\n                loadChildren: () => import('@core/auth/auth.module').then((m) => m.AuthModule)\n            }\n        ]\n    },\n    {\n        path: '**',\n        loadChildren: () => import('@core/not-found/not-found.module').then((m) => m.NotFoundModule)\n    }\n]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"submit\"",
                "file": "src/app/shared/buttons/button/button.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PasswordType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"password\" | \"text\"",
                "file": "src/app/shared/controls/password/password.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Value",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/shared/controls/date/date.component.ts",
                "description": "",
                "kind": 134
            },
            {
                "name": "Value",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number | string | boolean",
                "file": "src/app/core/models/view-models/control-item/index.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    rootUrl: ''\n}"
                }
            ],
            "src/app/core/constants/mock_api_contants.ts": [
                {
                    "name": "HOST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/mock_api_contants.ts",
                    "type": "",
                    "defaultValue": "environment.rootUrl"
                },
                {
                    "name": "MOCK_API",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/mock_api_contants.ts",
                    "type": "object",
                    "defaultValue": "{\r\n\r\n\r\n    // users group\r\n    I_1_FETCH_USERS:`${HOST}/users/filter`,\r\n    I_2_FETCH_USER_BY_ID:`${HOST}/users`,\r\n    I_3_CREATE_USER:`${HOST}/users`,\r\n    I_4_UPDATE_USER:`${HOST}/users`,\r\n    I_10_CREATE_USER_AUTH: `${HOST}/users/auth/login`,\r\n    I_11_RENEWTOKEN: `${HOST}/users/auth/renew`,\r\n    I_12_UPDATE_USER_AUTH: `${HOST}/users/auth/login`,\r\n    I_13_FETCH_USER_OPERATION: `${HOST}/users/operation`,\r\n\r\n    // \r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/shared/utils/form.ts": [
                {
                    "name": "mapControls",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/form.ts",
                    "type": "",
                    "defaultValue": "(controls: ControlEntities): void => {\r\n    Object.keys(controls).forEach((key) => {\r\n        controls[key].map();\r\n    });\r\n}"
                },
                {
                    "name": "markFormGroupTouched",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/form.ts",
                    "type": "",
                    "defaultValue": "(formGroup: FormGroup) => {\r\n    (Object as any).values(formGroup.controls).forEach((control: FormGroup) => {\r\n        control.markAsTouched();\r\n\r\n        if (control.controls) {\r\n            markFormGroupTouched(control);\r\n        }\r\n    });\r\n}"
                }
            ],
            "src/app/shared/utils/regex.ts": [
                {
                    "name": "regex",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/regex.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    // eslint-disable-next-line no-control-regex\r\n    email: /^\\s*(?:[A-Za-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\s*$/,\r\n    password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*([0-9]|[^\\w\\s]))/g,\r\n    latin: /^[A-Za-z-\\s]+$/,\r\n    numbers: /^\\d+$/,\r\n    latinAndNumbers: /^[A-Za-z0-9]+$/,\r\n    latinAndSpaces: /^[a-zA-Z\\s]*$/,\r\n    phone: /^[0-9-]+$/,\r\n    safe: /^([\\sA-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])*$/\r\n}"
                },
                {
                    "name": "regexErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/regex.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    email: 'Email is incorrect',\r\n    password: 'Password must contain an upper case letter, a lower case letter and a number',\r\n    latin: 'Latin letters only',\r\n    numbers: 'Digits only',\r\n    latinAndNumbers: 'Latin letters and digits only',\r\n    latinAndSpaces: 'Latin letters and spaces only',\r\n    phone: 'Phone number is incorrect',\r\n    safe: 'Latin letters, numbers and special characters only'\r\n}"
                }
            ],
            "src/app/app-routing.module.ts": [
                {
                    "name": "rootRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.module.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n    {\n        path: '',\n        redirectTo: 'auth',\n        pathMatch: 'full'\n    },\n    {\n        path: '',\n        children: [\n            {\n                path: 'home',\n                loadChildren: () => import('@features/home/home.module').then((m) => m.HomeModule)\n            },\n            {\n                path: 'auth',\n                loadChildren: () => import('@core/auth/auth.module').then((m) => m.AuthModule)\n            }\n        ]\n    },\n    {\n        path: '**',\n        loadChildren: () => import('@core/not-found/not-found.module').then((m) => m.NotFoundModule)\n    }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/buttons/button/button.component.ts": [
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"submit\"",
                    "file": "src/app/shared/buttons/button/button.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/controls/password/password.component.ts": [
                {
                    "name": "PasswordType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"password\" | \"text\"",
                    "file": "src/app/shared/controls/password/password.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/controls/date/date.component.ts": [
                {
                    "name": "Value",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/shared/controls/date/date.component.ts",
                    "description": "",
                    "kind": 134
                }
            ],
            "src/app/core/models/view-models/control-item/index.ts": [
                {
                    "name": "Value",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number | string | boolean",
                    "file": "src/app/core/models/view-models/control-item/index.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rootRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/pages/email-confirm/email-confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/pages/registration/registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/mock_api_contants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/mock_api_contants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_API",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/view-models/control-item/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControlItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/view-models/icon/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/view-models/item/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/not-found/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/pages/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/autocomplete/autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/checkboxes/checkboxes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/date-range/date-range.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateRangeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/date-range/date-range.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/date-range/date-range.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Value",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/date/date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/password/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/radios/radios.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadiosComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/controls/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/files-upload/files-upload.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FilesUploadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/indicators/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/notifications/components/errors/errors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/notifications/components/success/success.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuccessComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/file-size/file-size.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FileSizePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/highlight/highlight.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "HighlightPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/lang/lang.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LangPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Control",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControlEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapControls",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "markFormGroupTouched",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "regex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "regexErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}